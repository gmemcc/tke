---

apiVersion: v1
kind: ConfigMap
metadata:
  name: galaxy-etc
  namespace: kube-system
data:
  galaxy.json: |
    {
      "NetworkConf":[
        {"name":"tke-route-eni","type":"tke-route-eni","eni":"eth1","routeTable":1},
        {{- if eq .BackendProvider "flannel" }}
        {"name":"galaxy-flannel","type":"galaxy-flannel", "delegate":{"type":"galaxy-veth"},"subnetFile":"/run/flannel/subnet.env"},
        {{- else if eq .BackendProvider "calico" }}
        {"name":"galaxy-calico","type":"calico","datastore_type":"kubernetes","ipam":{"type":"calico-ipam"},"policy":{"type":"k8s"},"kubernetes":{"kubeconfig":"/etc/cni/net.d/calico-kubeconfig"}},
        {{- end }}
        {"name":"galaxy-k8s-vlan","type":"galaxy-k8s-vlan", "device":"{{ .DeviceName }}", "default_bridge_name": "br0"},
        {"name":"galaxy-k8s-sriov","type": "galaxy-k8s-sriov", "device": "{{ .DeviceName }}", "vf_num": 10}
      ],
      "DefaultNetworks": [{{ if eq .BackendProvider "flannel" }}"galaxy-flannel"{{ else if eq .BackendProvider "calico" }}"galaxy-calico"{{ end }}]
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: cni-etc
  namespace: kube-system
data:
  00-galaxy.conf: |
    {
      "name": "galaxy-sdn",
      "type": "galaxy-sdn",
      "capabilities": {"portMappings": true},
      "cniVersion": "0.2.0"
    }

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: galaxy
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: galaxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: galaxy
    namespace: kube-system

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: galaxy
  name: galaxy
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: galaxy
  template:
    metadata:
      labels:
        app: galaxy
    spec:
      serviceAccountName: galaxy
      hostNetwork: true
      hostPID: true
      containers:
        - image: {{ .GalaxyDaemonImage }}
          command: ["/bin/sh"]
          args: ["-c", "cp -p /etc/galaxy/cni/00-galaxy.conf /etc/cni/net.d/; cp -p /opt/cni/galaxy/bin/galaxy-sdn /opt/cni/galaxy/bin/loopback /opt/cni/bin/; /usr/bin/galaxy --logtostderr=true --v=3"]
          name: galaxy
          env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: DOCKER_HOST
              value: unix:///host/run/docker.sock
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            privileged: true
          volumeMounts:
            - name: galaxy-run
              mountPath: /var/run/galaxy/
            {{- if eq .BackendProvider "flannel" }}
            - name: flannel-run
              mountPath: /run/flannel
            {{- else if eq .BackendProvider "calico" }}
            - name: calico-varlib
              mountPath: /var/lib/calico
            {{- end }}
            - name: galaxy-log
              mountPath: /data/galaxy/logs
            - name: galaxy-etc
              mountPath: /etc/galaxy
            - name: cni-config
              mountPath: /etc/cni/net.d/
            - name: cni-bin
              mountPath: /opt/cni/bin
            - name: cni-etc
              mountPath: /etc/galaxy/cni
            - name: cni-state
              mountPath: /var/lib/cni
            - name: docker-sock
              mountPath: /host/run/
      tolerations:
        - effect: NoSchedule
          operator: Exists
      terminationGracePeriodSeconds: 30
      volumes:
        - name: galaxy-run
          hostPath:
            path: /var/run/galaxy
        {{- if eq .BackendProvider "flannel" }}
        - name: flannel-run
          hostPath:
            path: /run/flannel
        {{- else if eq .BackendProvider "calico" }}
        - name: calico-varlib
          hostPath:
            path: /var/lib/calico
        {{- end }}
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: galaxy-log
          emptyDir: {}
        - configMap:
            defaultMode: 420
            name: galaxy-etc
          name: galaxy-etc
        - name: cni-config
          hostPath:
            path: /etc/cni/net.d/
        - name: cni-bin
          hostPath:
            path: /opt/cni/bin
        - name: cni-state
          hostPath:
            path: /var/lib/cni
        - configMap:
            defaultMode: 420
            name: cni-etc
          name: cni-etc
        - name: docker-sock
          hostPath:
            path: /run/
